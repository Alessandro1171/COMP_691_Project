# Generated 2025-03-29 from:
# /content/hparams_xvector_v2.yaml
# yamllint disable
seed: 1988
__set_seed: !!python/object/apply:torch.manual_seed [1988]

output_folder: ./results/TIMIT_tiny/Xvector/FBANKs/1988
save_folder: ./results/TIMIT_tiny/Xvector/FBANKs/1988/save
train_log: ./results/TIMIT_tiny/Xvector/FBANKs/1988/train_log.txt
data_folder: ./content/data/accent_data
# Path where data manifest files are stored
train_annotation: ./save_data_json/train.json
valid_annotation: ./save_data_json/valid.json
test_annotation: ./save_data_json/test.json

# The train logger writes training statistics to a file, as well as stdout.
train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
  save_file: ./results/TIMIT_tiny/Xvector/FBANKs/1988/train_log.txt

error_stats: !name:speechbrain.utils.metric_stats.MetricStats
  metric: !name:speechbrain.nnet.losses.classification_error
    reduction: batch

# Feature parameters
n_mels: 40

# Training Parameters
sample_rate: 16000
number_of_epochs: 25
batch_size: 16
lr_start: 0.001
lr_final: 0.0001
n_classes: 2
emb_dim: 128 # dimensionality of the embeddings
dataloader_options:
  batch_size: 16

# Feature extraction
compute_features: &id001 !new:speechbrain.lobes.features.Fbank
  n_mels: 40

# Mean and std normalization of the input features
mean_var_norm: &id002 !new:speechbrain.processing.features.InputNormalization
  norm_type: global

# Embedding model: from variable size digits gets a fixed size embedding vector
embedding_model: &id003 !new:speechbrain.lobes.models.Xvector.Xvector
  in_channels: 40
  activation: !name:torch.nn.LeakyReLU
  tdnn_blocks: 5
  tdnn_channels: [64, 64, 64, 64, 128]
  tdnn_kernel_sizes: [5, 3, 3, 1, 1]
  tdnn_dilations: [1, 2, 3, 1, 1]
  lin_neurons: 128

# Clasifier applied on top of the embeddings
classifier: &id004 !new:speechbrain.lobes.models.Xvector.Classifier

# This optimizer will be constructed by the Brain class after all parameters
# are moved to the correct device. Then it will be added to the checkpointer.
  input_shape: [null, null, 128]
  activation: !name:torch.nn.LeakyReLU
  lin_blocks: 1
  lin_neurons: 128
  out_neurons: 2

# The first object passed to the Brain class is this "Epoch Counter"
# which is saved by the Checkpointer so that training can be resumed
# if it gets interrupted at any point.
epoch_counter: &id005 !new:speechbrain.utils.epoch_loop.EpochCounter
  limit: 25

# Objects in "modules" dict will have their parameters moved to the correct
# device, as well as having train()/eval() called on them by the Brain class.
modules:
  compute_features: *id001
  mean_var_norm: *id002
  embedding_model: *id003
  classifier: *id004
opt_class: !name:torch.optim.Adam
  lr: 0.001

# This function manages learning rate annealing over the epochs.
# We here use the simple lr annealing method that linearly decreases
# the lr from the initial value to the final one.
lr_annealing: !new:speechbrain.nnet.schedulers.LinearScheduler
  initial_value: 0.001
  final_value: 0.0001
  epoch_count: 25

# This object is used for saving the state of training both so that it
# can be resumed if it gets interrupted, and also so that the best checkpoint
# can be later loaded for evaluation or inference.
checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
  checkpoints_dir: ./results/TIMIT_tiny/Xvector/FBANKs/1988/save
  recoverables:
    embedding_model: *id003
    classifier: *id004
    normalizer: *id002
    counter: *id005
