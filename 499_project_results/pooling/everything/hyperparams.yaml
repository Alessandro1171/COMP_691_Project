# Generated 2025-04-24 from:
# /content/hparams_pooling.yaml
# yamllint disable
seed: 1986
__set_seed: !!python/object/apply:torch.manual_seed [1986]

output_folder: ./results/TIMIT_tiny/Pooling/FBANKs/1986
save_folder: ./results/TIMIT_tiny/Pooling/FBANKs/1986/save
train_log: ./results/TIMIT_tiny/Pooling/FBANKs/1986/train_log.txt
data_folder: ./content/data/accent_data
# Path where data manifest files are stored
train_annotation: ./save_data_json/train.json
valid_annotation: ./save_data_json/valid.json
test_annotation: ./save_data_json/test.json

# The train logger writes training statistics to a file, as well as stdout.
train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
  save_file: ./results/TIMIT_tiny/Pooling/FBANKs/1986/train_log.txt

error_stats: !name:speechbrain.utils.metric_stats.MetricStats
  metric: !name:speechbrain.nnet.losses.classification_error
    reduction: batch

# Feature parameters
n_mels: 40

# Training Parameters
sample_rate: 16000
number_of_epochs: 30
batch_size: 16
lr_start: 0.003
lr_final: 0.0001
n_classes: 2
hidden_size: 256
emb_dim: 128 # dimensionality of the embeddings
dataloader_options:
  batch_size: 16

# Feature extraction
compute_features: &id001 !new:speechbrain.lobes.features.Fbank
  n_mels: 40

# Mean and std normalization of the input features
mean_var_norm: &id002 !new:speechbrain.processing.features.InputNormalization
  norm_type: global

# CNN layers
conv1: &id003 !new:speechbrain.nnet.CNN.Conv1d
  in_channels: 40
  out_channels: 64
  kernel_size: 5

conv2: &id004 !new:speechbrain.nnet.CNN.Conv1d
  in_channels: 64
  out_channels: 64
  kernel_size: 3
  dilation: 2

conv3: &id005 !new:speechbrain.nnet.CNN.Conv1d
  in_channels: 64
  out_channels: 128
  kernel_size: 3
  dilation: 3

# Pooling layer to create fixed-dimensional embeddings
pooling: &id006 !new:speechbrain.nnet.pooling.StatisticsPooling
  return_std: false

# Linear layers
embedding_linear1: &id007 !new:speechbrain.nnet.linear.Linear
  input_size: 128    # This should match the output size from the pooling layer (cnn_channels)
  n_neurons: 256
  bias: true

embedding_linear2: &id008 !new:speechbrain.nnet.linear.Linear
  input_size: 256                   # This matches the output from embedding_linear1
  n_neurons: 128
  bias: true

classifier_linear1: &id009 !new:speechbrain.nnet.linear.Linear
  input_size: 128               # This matches the output from embedding_linear2
  n_neurons: 128
  bias: true

classifier_linear2: &id010 !new:speechbrain.nnet.linear.Linear

# This optimizer will be constructed by the Brain class after all parameters
# are moved to the correct device. Then it will be added to the checkpointer.
  input_size: 128               # This matches the output from classifier_linear1
  n_neurons: 2
  bias: true

# The first object passed to the Brain class is this "Epoch Counter"
# which is saved by the Checkpointer so that training can be resumed
# if it gets interrupted at any point.
epoch_counter: &id011 !new:speechbrain.utils.epoch_loop.EpochCounter
  limit: 30

# Objects in "modules" dict will have their parameters moved to the correct
# device, as well as having train()/eval() called on them by the Brain class.
modules:
  compute_features: *id001
  mean_var_norm: *id002
  conv1: *id003
  conv2: *id004
  conv3: *id005
  pooling: *id006
  embedding_linear1: *id007
  embedding_linear2: *id008
  classifier_linear1: *id009
  classifier_linear2: *id010
opt_class: !name:torch.optim.Adam
  lr: 0.003

# This function manages learning rate annealing over the epochs.
# We here use the simple lr annealing method that linearly decreases
# the lr from the initial value to the final one.
lr_annealing: !new:speechbrain.nnet.schedulers.LinearScheduler
  initial_value: 0.003
  final_value: 0.0001
  epoch_count: 30

# This object is used for saving the state of training both so that it
# can be resumed if it gets interrupted, and also so that the best checkpoint
# can be later loaded for evaluation or inference.
checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
  checkpoints_dir: ./results/TIMIT_tiny/Pooling/FBANKs/1986/save
  recoverables:
    conv1: *id003
    conv2: *id004
    conv3: *id005
    pooling: *id006
    embedding_linear1: *id007
    embedding_linear2: *id008
    classifier_linear1: *id009
    classifier_linear2: *id010
    normalizer: *id002
    counter: *id011
